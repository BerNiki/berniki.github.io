(()=>{"use strict";var e={28:(e,t,o)=>{o.d(t,{Z:()=>a});var n=o(537),i=o.n(n),s=o(645),r=o.n(s)()(i());r.push([e.id,"#main-canvas {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,kBAAkB;IAClB,OAAO;IACP,QAAQ;IACR,MAAM;IACN,SAAS;AACb",sourcesContent:["#main-canvas {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n}"],sourceRoot:""}]);const a=r},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",n=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),n&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),n&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,n,i,s){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(n)for(var a=0;a<this.length;a++){var p=this[a][0];null!=p&&(r[p]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);n&&r[l[0]]||(void 0!==s&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=s),o&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=o):l[2]=o),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(i," */"),r=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[t].concat(r).concat([s]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function o(e){for(var o=-1,n=0;n<t.length;n++)if(t[n].identifier===e){o=n;break}return o}function n(e,n){for(var s={},r=[],a=0;a<e.length;a++){var p=e[a],c=n.base?p[0]+n.base:p[0],l=s[c]||0,h="".concat(c," ").concat(l);s[c]=l+1;var u=o(h),d={css:p[1],media:p[2],sourceMap:p[3],supports:p[4],layer:p[5]};if(-1!==u)t[u].references++,t[u].updater(d);else{var f=i(d,n);n.byIndex=a,t.splice(a,0,{identifier:h,updater:f,references:1})}r.push(h)}return r}function i(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,i){var s=n(e=e||[],i=i||{});return function(e){e=e||[];for(var r=0;r<s.length;r++){var a=o(s[r]);t[a].references--}for(var p=n(e,i),c=0;c<s.length;c++){var l=o(s[c]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}s=p}}},569:e=>{var t={};e.exports=function(e,o){var n=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(o)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,o)=>{e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var n="";o.supports&&(n+="@supports (".concat(o.supports,") {")),o.media&&(n+="@media ".concat(o.media," {"));var i=void 0!==o.layer;i&&(n+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),n+=o.css,i&&(n+="}"),o.media&&(n+="}"),o.supports&&(n+="}");var s=o.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function o(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={id:n,exports:{}};return e[n](s,s.exports,o),s.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.nc=void 0,(()=>{var e=o(379),t=o.n(e),n=o(795),i=o.n(n),s=o(569),r=o.n(s),a=o(565),p=o.n(a),c=o(216),l=o.n(c),h=o(589),u=o.n(h),d=o(28),f={};f.styleTagTransform=u(),f.setAttributes=p(),f.insert=r().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=l(),t()(d.Z,f),d.Z&&d.Z.locals&&d.Z.locals;var v=function(){function e(e,t){this.x=e,this.y=t}return e.prototype.add=function(e){return this.x+=e.x,this.y+=e.y,this},e.prototype.subtract=function(e){return this.x-=e.x,this.y-=e.y,this},e.prototype.copy=function(e){return this.x=e.x,this.y=e.y,this},e.prototype.scale=function(e){return this.x*=e,this.y*=e,this},e.prototype.clone=function(){return new e(this.x,this.y)},e.prototype.rotate=function(e){var t=Math.cos(e/180*Math.PI),o=Math.sin(e/180*Math.PI),n=this.x*t-this.y*o,i=this.x*o+this.y*t;return this.x=n,this.y=i,this},e}(),y=function(){function e(){this.position=new v(0,0),this.velocity=new v(0,0),this.angle=0,this.angularVelo=0}return e.prototype.update=function(){this.position.add(this.velocity),this.position.x>m.width/2?this.position.x-=m.width:this.position.x<-m.width/2&&(this.position.x+=m.width),this.position.y>m.height/2?this.position.y-=m.height:this.position.y<-m.height/2&&(this.position.y+=m.height),this.angle+=this.angularVelo},e}(),g=[],m=document.querySelector("#main-canvas"),S=m.getContext("2d"),b={spaceShipPose:new y,spaceShipSpeed:0,bullets:[],asteroids:[],time:0};function w(e,t,o){var n=t.clone().subtract(e),i=o.clone().subtract(e);return n.x*i.y-n.y*i.x>0?1:-1}function x(e,t,o,n){var i=w(t,o,e)+w(o,n,e)+w(n,t,e);return 3===Math.abs(i)}function P(e,t){for(var o=e.clone().subtract(t.pose.position).rotate(-t.pose.angle),n=new v(0,0),i=0;i<t.shape.length;i++)if(x(o,n,t.shape[i],t.shape[(i+1)%t.shape.length]))return!0;return!1}function M(){m.width=window.innerWidth,m.height=window.innerHeight}function A(){b.time++,b.spaceShipPose.velocity.x+=Math.sin(b.spaceShipPose.angle*Math.PI/180)*b.spaceShipSpeed,b.spaceShipPose.velocity.y-=Math.cos(b.spaceShipPose.angle*Math.PI/180)*b.spaceShipSpeed,b.spaceShipPose.velocity.scale(.97),b.spaceShipPose.angularVelo*=.95,b.spaceShipPose.update();for(var e=0;e<b.bullets.length;)b.time-b.bullets[e].birthTime>=50?b.bullets.splice(e,1):(b.bullets[e].pose.update(),e++);for(var t=0,o=b.asteroids;t<o.length;t++)o[t].pose.update();for(e=0;e<b.asteroids.length;e++){P(b.spaceShipPose.position,b.asteroids[e])&&(b.spaceShipPose.position=new v(0,0));for(var n=0;n<b.bullets.length;){for(var i=!1,s=0;s<b.asteroids.length;)P(b.bullets[n].pose.position,b.asteroids[s])?(i=!0,b.asteroids.splice(s,1)):s++;i?b.bullets.splice(n,1):n++}}for(b.spaceShipSpeed=0,S.resetTransform(),S.fillStyle="black",S.fillRect(0,0,m.width,m.height),e=0;e<g.length;e++)S.fillStyle="white",S.fillRect(g[e].x,g[e].y,2,2);S.translate(m.width/2,m.height/2),S.save(),S.translate(b.spaceShipPose.position.x,b.spaceShipPose.position.y),S.rotate(b.spaceShipPose.angle*Math.PI/180),S.strokeStyle="red",S.beginPath(),S.moveTo(-9,9),S.lineTo(9,9),S.lineTo(0,-15),S.lineTo(-9,9),S.fillStyle="red",S.stroke(),S.fill(),S.restore(),function(){for(var e=0,t=b.bullets;e<t.length;e++){var o=t[e];S.save(),S.translate(o.pose.position.x,o.pose.position.y),S.rotate(o.pose.angle*Math.PI/180),S.strokeStyle="purple",S.lineWidth=3,S.beginPath(),S.moveTo(0,-15),S.lineTo(0,-25),S.stroke(),S.restore()}}(),function(){for(var e=0,t=b.asteroids;e<t.length;e++){var o=t[e];S.save(),S.translate(o.pose.position.x,o.pose.position.y),S.rotate(o.pose.angle*Math.PI/180),S.strokeStyle="grey",S.lineWidth=5,S.beginPath(),S.moveTo(o.shape[0].x,o.shape[0].y);for(var n=0;n<o.shape.length;n++)S.lineTo(o.shape[n].x,o.shape[n].y);S.closePath(),S.fillStyle="grey",S.fill(),S.stroke(),S.restore()}}(),window.requestAnimationFrame(A)}window.addEventListener("keydown",(function(e){if("ArrowUp"===e.key)b.spaceShipSpeed=1;else if("ArrowLeft"===e.key)b.spaceShipPose.angularVelo-=5;else if("ArrowRight"===e.key)b.spaceShipPose.angularVelo+=5;else if("ArrowDown"===e.key)b.spaceShipSpeed=-1;else if(" "===e.key){var t={birthTime:b.time,pose:new y};t.pose.position.copy(b.spaceShipPose.position),t.pose.velocity.y=-6,t.pose.velocity.rotate(b.spaceShipPose.angle).add(b.spaceShipPose.velocity),t.pose.angle=b.spaceShipPose.angle,b.bullets.push(t)}})),window.addEventListener("load",(function(){M(),function(){for(var e=0;e<m.width;e++)for(var t=0;t<m.height;t++)1===Math.round(1500*Math.random())&&g.push(new v(e,t))}(),A();for(var e=0;e<10;e++){for(var t=[],o=0;o<10;o++){var n=Math.PI/10*o*2,i=10+40*Math.random();t.push(new v(Math.cos(n)*i,Math.sin(n)*i))}var s=new y;s.position.x=700*Math.random()-450,s.position.y=700*Math.random()-450,s.angle=360*Math.random(),s.velocity.x=5*Math.random()-2,s.velocity.y=5*Math.random()-2,s.angularVelo=5*Math.random()-2,b.asteroids.push({shape:t,pose:s})}})),window.addEventListener("resize",M)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,